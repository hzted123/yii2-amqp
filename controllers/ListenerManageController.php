<?php

namespace hzted123\amqp\controllers;

use Yii;
use yii\base\Exception;
use yii\console\Controller;

class ListenerManageController extends Controller
{
    public $interpreterPath;
    /**
     * @var string Bootstrap script path (if empty, current command runner will be used)
     */
    public $bootstrapScript;

    /**
     * @var array Queue need to keep and count
     *
     * example:
     * 'configs' => [
     *     ['queue' => 'market.uber.recall', 'count' => 2]
     * ]
     */

    public $configs;

    public function beforeAction ($action) {
        $this->interpreterPath = Yii::$app->controllerMap['cron']['interpreterPath'];
        $this->bootstrapScript = Yii::$app->controllerMap['cron']['bootstrapScript'];
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * keep listener processes running
     * @param $params
     * @param $count
     */
    public function actionKeep(){
        foreach ($this->configs as $config) {
            $this->keep($config['queue'], $config['count']);
        }
    }

    protected function keep($queue, $count){
        $command = "ps aux | grep '$this->interpreterPath $this->bootstrapScript listener --queue=$queue' | grep -v 'grep' | wc -l";
        echo $command.PHP_EOL;
        $now_count = shell_exec($command);
        echo "number of processes :". (int)$now_count. PHP_EOL;
        $add = (int)$count - (int)$now_count;
        if ($add <= 0) {
            return false;
        }
        $command = "$this->interpreterPath $this->bootstrapScript listener --queue=$queue";
        $this->runCommandBackground($command, $add);
    }

    /**
     * kill linster processes
     */
    public function actionKill(){
        $command = "ps aux | grep '$this->interpreterPath $this->bootstrapScript listener ' | grep -v 'grep' |  awk -F ' ' '{print $2}'";
        echo $command.PHP_EOL;
        $result = shell_exec($command);
        $data = explode(PHP_EOL, $result);
        foreach ($data as $pid){
            if (!empty((int)$pid)) {
                shell_exec('kill '.(int)$pid);
                echo "killed pid: $pid" . PHP_EOL;
            }
        }
    }

    protected function isWindowsOS()
    {
        return strncmp(PHP_OS, 'WIN', 3) === 0;
    }

    protected function runCommandBackground($command, $count)
    {
        for ($i=0;$i<$count;$i++){
            if ($this->isWindowsOS()) {
                //Windows OS
                pclose(popen('start /B "Yii run command" ' . $command, 'r'));
            } else {
                //nix based OS
                system($command . ' > /dev/null 2>&1 &');
                echo "start : $command".PHP_EOL;
            }
        }

    }
}
